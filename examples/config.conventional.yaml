# Kommit Configuration Example - Conventional Commits
# Place this file in one of these locations:
# - $PWD/.kommit.yaml
# - $GIT_DIR/.konfig.yaml (if in a git repository)
# - $XDG_CONFIG_HOME/kommit/config.yaml
# - $HOME/.config/kommit/config.yaml
# - $HOME/.kommit.yaml

# Ollama API configuration
ollama:
  # URL of the Ollama API server
  server_url: "http://localhost:11434/api/generate"
  # Model to use for generating commit messages
  model: "qwen2.5-coder:7b"

# Rules for generating conventional commit messages
rules: |
  Follow the Conventional Commits specification (https://www.conventionalcommits.org/)
  
  Format: <type>[optional scope]: <description>
  [optional body]
  [optional footer(s)]
  
  Types:
  - feat: A new feature
  - fix: A bug fix
  - docs: Documentation only changes
  - style: Changes that do not affect the meaning of the code (white-space, formatting, etc)
  - refactor: A code change that neither fixes a bug nor adds a feature
  - perf: A code change that improves performance
  - test: Adding missing tests or correcting existing tests
  - chore: Changes to the build process or auxiliary tools and libraries
  
  Rules:
  1. Use the imperative, present tense ("add feature" not "added feature")
  2. Do not capitalize the first letter of the description
  3. No dot (.) at the end of the description
  4. Keep the subject line under 72 characters
  5. Reference issues and pull requests in the footer when applicable
  6. Consider starting the commit message with an applicable emoji
  
  Example:
  feat(auth): add login functionality
  
  - Implement JWT token generation on successful login
  - Add login form validation
  - Update authentication middleware
  
  Closes #123
  
  Emoji Reference:
  ‚ú® feat: New feature
  üêõ fix: Bug fix
  üìö docs: Documentation
  üíÑ style: Code style
  ‚ôªÔ∏è refactor: Code refactoring
  ‚ö° perf: Performance improvements
  ‚úÖ test: Adding tests
  üîß chore: Maintenance
